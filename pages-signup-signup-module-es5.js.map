{"version":3,"sources":["webpack:///src/app/pages/signup/signup-routing.module.ts","webpack:///src/app/pages/signup/signup.component.ts","webpack:///src/app/pages/signup/signup.component.html","webpack:///src/app/pages/signup/signup.module.ts"],"names":["routes","path","component","SignupRoutingModule","forChild","imports","exports","SignupComponent","page","apiService","formBuilder","submitted","role_id","submittedStep1","step1success","stateList","registerFormStep1","group","email","required","registerForm","fname","lname","password","pattern","country_id","state_id","city","zip_code","terms","requiredTrue","getRegisterPage","getRegister","subscribe","res","console","log","status","registerPageData","err","role","id","controls","registerResponseError","invalid","formData","FormData","set","value","register","registerResponse","event","target","patchValue","getSateList","getStates","states","registrationStep1Submit","selector","templateUrl","styleUrls","SignupModule","declarations"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAIA,UAAMA,MAAM,GAAW,CACrB;AACEC,YAAI,EAAE,EADR;AAEEC,iBAAS,EAAE;AAFb,OADqB,CAAvB;;UAWaC,mB;;;;;cAAAA;;;;2BAAAA,mB;AAAmB,S;AAAA,kBAHrB,CAAC,6DAAaC,QAAb,CAAsBJ,MAAtB,CAAD,CAGqB,EAFpB,4DAEoB;;;;4HAAnBG,mB,EAAmB;AAAA;AAAA,oBAFpB,4DAEoB;AAAA,S;AAFR,O;;;;;wEAEXA,mB,EAAmB;gBAJ/B,sDAI+B;iBAJtB;AACRE,mBAAO,EAAE,CAAC,6DAAaD,QAAb,CAAsBJ,MAAtB,CAAD,CADD;AAERM,mBAAO,EAAE,CAAC,4DAAD;AAFD,W;AAIsB,U;;;;;;;;;;;;;;;;;;ACfhC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACgC4C;;AAAqC;;AAAiB;;;;;;AACtD;;AAAkC;;AACtB;;;;;;AAHhB;;AACI;;AACA;;AAEJ;;;;;;AAHS;;AAAA;;AACA;;AAAA;;;;;;AA+BrB;;AACI;;AAAG;;AAAiC;;AACxC;;;;;;AADO;;AAAA;;;;;;AAEP;;AAEI;;AAAK;;AAAiC;;AAC1C;;;;;;AADS;;AAAA;;;;;;AAaG;;AAAqC;;AAAsB;;;;;;AAD/D;;AACI;;AACJ;;;;;;AADS;;AAAA;;;;;;AAaL;;AAAqC;;AAAqB;;;;;;AAD9D;;AACI;;AACJ;;;;;;AADS;;AAAA;;;;;;AA4BT;;AAAwC;;AAAoB;;;;;;AAC5D;;AAAsE;;AAG5D;;;;;;AALd;;AACI;;AACA;;AAIJ;;;;;;AALS;;AAAA;;AACA;;AAAA;;;;;;AAeG;;AACyB;;AAAgB;;;;;;AAArC;;AAAqB;;AAAA;;;;;;AAMzB;;AAA0C;;AAAmB;;;;;;AADjE;;AACI;;AACJ;;;;;;AADS;;AAAA;;;;;;AAYL;;AACuB;;AAAc;;;;;;AAAjC;;AAAmB;;AAAA;;;;;;AAMvB;;AAAwC;;AAAiB;;;;;;AAD7D;;AACI;;AACJ;;;;;;AADS;;AAAA;;;;;;AAqBL;;AAAoC;;AAAgB;;;;;;AADxD;;AACI;;AACJ;;;;;;AADS;;AAAA;;;;;;AAWL;;AAAwC;;AAAoB;;;;;;AADhE;;AACI;;AACJ;;;;;;AADS;;AAAA;;;;;;;;AAWL;;AACI;;AAEA;;AAAO;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAEmC;;AAAsB;;AACpE;;;;;;;AAJQ;;AAAA;;AAGA;;AAAA;;AAAoB;;AAAkB;;AAAA;;;;;;AAyB9C;;AAAqC;;AAA4B;;;;;;AADrE;;AACI;;AACJ;;;;;;AADS;;AAAA;;;;;;;;;;;;;;AAtLjD;;AACI;;AACI;;AACI;;AACI;;AAAyC;;AAAgC;;AACzE;;AACI;;AACI;;AACI;;AAGA;;AAIA;;AACI;;AACI;;AACI;;AAAqE;;AACR;;AAC7D;;AAIJ;;AACA;;AAGJ;;AACA;;AACI;;AACI;;AAAqE;;AACR;;AAC7D;;AAIJ;;AACA;;AAGJ;;AACJ;;AAcA;;AACI;;AACI;;AAAoE;;AACV;;AAC1D;;AAKJ;;AACA;;AAOJ;;AACA;;AAEI;;AACI;;AACI;;AAGwC;AAAA;;AAAA;;AAAA;AAAA;;AACpC;;AAA0B;;AAAO;;AACjC;;AAKJ;;AACA;;AAGJ;;AACJ;;AAEA;;AACI;;AACI;;AAII;;AAA0B;;AAAY;;AACtC;;AAKJ;;AACA;;AAGJ;;AACJ;;AAEA;;AACI;;AAUI;;AAIA;;AAGJ;;AACJ;;AACA;;AACI;;AACI;;AAIA;;AAGJ;;AACJ;;AACA;;AACI;;AACI;;AAAQ;;AAAS;;AACrB;;AACA;;AACI;;AAEI;;AAmBJ;;AACJ;;AACA;;AACI;;AAEA;;AAA0D;;AAE1C;;AAAqC;;AAC1C;;AAAK;;AAAI;;AAAsC;;AAAc;;AAAI;;AAC5E;;AACA;;AAGJ;;AACA;;AACI;;AACI;AAAA;;AAAA;;AAAA;AAAA;;AAAkE;;AAC3D;;AACf;;AACA;;AACA;;AAAwB;;AAAkB;;AACV;;AACrB;;AAAI;;AACnB;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;;;;;AAnM8B;;AAAA;;AAC2C;;AAAA;;AAGxC;;AAAA;;AAUW;;AAAA;;AAIH;;AAAA;;AASG;;AAAA;;AAIH;;AAAA;;AAwBD;;AAAA;;AAIH;;AAAA;;AAcO;;AAAA;;AAGQ;;AAAA;;AAMP;;AAAA;;AAUD;;AAAA;;AAGQ;;AAAA;;AAMP;;AAAA;;AAmBD;;AAAA;;AAEC;;AAAA;;AASD;;AAAA;;AAEC;;AAAA;;AAYI;;AAAA;;AA6BJ;;AAAA;;;;;;;;;;AAuB7C;;AACI;;AACI;;AACI;;AACI;;AACJ;;AACA;;AACI;;AACI;;AACJ;;AACA;;AACI;;AACJ;;AAEA;;AACI;;AACuC;;AAAK;;AAChD;;AACJ;;AACJ;;AACJ;;AACJ;;;;;;AAVoB;;AAAA;;AAIQ;;AAAA;;;;UDvQfC,e;AAQX,iCAAoBC,IAApB,EACUC,UADV,EAEUC,WAFV,EAEoC;AAAA;;AAFhB,eAAAF,IAAA,GAAAA,IAAA;AACV,eAAAC,UAAA,GAAAA,UAAA;AACA,eAAAC,WAAA,GAAAA,WAAA;AANV,eAAAC,SAAA,GAAY,KAAZ;AACA,eAAAC,OAAA,GAAe,CAAf;AA+FA,eAAAC,cAAA,GAAiB,KAAjB;AACA,eAAAC,YAAA,GAAe,KAAf;AAoBA,eAAAC,SAAA,GAAgB,EAAhB;AA/GuC;;;;iBAEvC,oBAAQ;AACN,iBAAKC,iBAAL,GAAyB,KAAKN,WAAL,CAAiBO,KAAjB,CAAuB;AAC9CC,mBAAK,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWC,QAAZ,EAAsB,0DAAWD,KAAjC,CAAL;AADuC,aAAvB,CAAzB;AAIA,iBAAKE,YAAL,GAAoB,KAAKV,WAAL,CAAiBO,KAAjB,CAAuB;AACzCI,mBAAK,EAAE,CAAC,EAAD,EAAK,0DAAWF,QAAhB,CADkC;AAEzCG,mBAAK,EAAE,CAAC,EAAD,EAAK,0DAAWH,QAAhB,CAFkC;AAIzCI,sBAAQ,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWJ,QAAZ,EAAsB,0DAAWK,OAAX,CAAmB,iCAAnB,CAAtB,CAAL,CAJ+B;AAKzC;AACA;AACAC,wBAAU,EAAE,CAAC,EAAD,EAAK,0DAAWN,QAAhB,CAP6B;AAQzCO,sBAAQ,EAAE,CAAC,EAAD,EAAK,0DAAWP,QAAhB,CAR+B;AASzCQ,kBAAI,EAAE,CAAC,EAAD,EAAK,0DAAWR,QAAhB,CATmC;AAUzCS,sBAAQ,EAAE,CAAC,EAAD,EAAK,0DAAWT,QAAhB,CAV+B;AAWzCU,mBAAK,EAAE,CAAC,KAAD,EAAQ,0DAAWC,YAAnB,CAXkC,CAYzC;AACA;AACA;AACA;AACA;AACA;;AAjByC,aAAvB,CAApB;AA0BA,iBAAKC,eAAL;AACD;;;iBAED,2BAAkB;AAAA;;AAChB,iBAAKvB,IAAL,CAAUwB,WAAV,GAAwBC,SAAxB,CAAkC,UAACC,GAAD,EAAc;AAC9CC,qBAAO,CAACC,GAAR,CAAYF,GAAZ;;AACA,kBAAIA,GAAG,CAACG,MAAR,EAAgB;AACd,qBAAI,CAACC,gBAAL,GAAwBJ,GAAxB;AACD;AACF,aALD,EAKG,UAAAK,GAAG,EAAI;AACRJ,qBAAO,CAACC,GAAR,CAAYG,GAAZ;AACD,aAPD;AAQD;;;iBAED,oBAAWC,IAAX,EAAiB;AACfL,mBAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBI,IAApB;AACA,iBAAK5B,OAAL,GAAe4B,IAAI,CAACC,EAApB;AACD;;;eAED,eAAQ;AAAE,mBAAO,KAAKrB,YAAL,CAAkBsB,QAAzB;AAAoC;;;eAC9C,eAAQ;AAAE,mBAAO,KAAK1B,iBAAL,CAAuB0B,QAA9B;AAAyC;;;iBAEnD,8BAAqB;AAAA;;AACnB,iBAAK/B,SAAL,GAAiB,IAAjB;AACA,iBAAKgC,qBAAL,GAA6B,IAA7B;AACAR,mBAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkC,KAAKhB,YAAvC;;AAEA,gBAAI,KAAKA,YAAL,CAAkBwB,OAAtB,EAA+B;AAC7B;AACD,aAFD,MAEO;AACLT,qBAAO,CAACC,GAAR,CAAY,UAAZ;AAEA,kBAAIS,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACAD,sBAAQ,CAACE,GAAT,CAAa,OAAb,EAAsB,KAAK3B,YAAL,CAAkB4B,KAAlB,CAAwB3B,KAA9C;AACAwB,sBAAQ,CAACE,GAAT,CAAa,OAAb,EAAsB,KAAK3B,YAAL,CAAkB4B,KAAlB,CAAwB1B,KAA9C;AACAuB,sBAAQ,CAACE,GAAT,CAAa,OAAb,EAAsB,KAAK/B,iBAAL,CAAuBgC,KAAvB,CAA6B9B,KAAnD,EANK,CAOL;;AACA2B,sBAAQ,CAACE,GAAT,CAAa,UAAb,EAAyB,KAAK3B,YAAL,CAAkB4B,KAAlB,CAAwBzB,QAAjD;AACAsB,sBAAQ,CAACE,GAAT,CAAa,uBAAb,EAAsC,KAAK3B,YAAL,CAAkB4B,KAAlB,CAAwBzB,QAA9D;AACAsB,sBAAQ,CAACE,GAAT,CAAa,YAAb,EAA2B,KAAK3B,YAAL,CAAkB4B,KAAlB,CAAwBvB,UAAnD;AACAoB,sBAAQ,CAACE,GAAT,CAAa,MAAb,EAAqB,KAAK3B,YAAL,CAAkB4B,KAAlB,CAAwBrB,IAA7C;AACAkB,sBAAQ,CAACE,GAAT,CAAa,UAAb,EAAyB,KAAK3B,YAAL,CAAkB4B,KAAlB,CAAwBpB,QAAjD;AACAiB,sBAAQ,CAACE,GAAT,CAAa,SAAb,EAAwB,KAAKnC,OAA7B;AAEA,mBAAKJ,IAAL,CAAUyC,QAAV,CAAmBJ,QAAnB,EAA6BZ,SAA7B,CAAuC,UAACC,GAAD,EAAc;AACnDC,uBAAO,CAACC,GAAR,CAAYF,GAAZ;;AACA,oBAAGA,GAAG,CAACG,MAAP,EAAc;AACZ,wBAAI,CAACa,gBAAL,GAAwBhB,GAAxB;AACD,iBAFD,MAEK;AACH,wBAAI,CAACS,qBAAL,GAA6BT,GAA7B;AACD;AACF,eAPD,EAOG,UAAAK,GAAG,EAAI;AACRJ,uBAAO,CAACC,GAAR,CAAYG,GAAZ;AACD,eATD;AAWD;AACF;;;iBAGD,mCAAuB;AACrB,iBAAK1B,cAAL,GAAsB,IAAtB;AACAsB,mBAAO,CAACC,GAAR,CAAY,KAAKpB,iBAAjB;;AACA,gBAAI,KAAKA,iBAAL,CAAuB4B,OAA3B,EAAoC;AAClC;AACD,aAFD,MAEK;AACH,mBAAK9B,YAAL,GAAoB,IAApB;AACD;AAEF;;;iBAED,uBAAcqC,KAAd,EAAmB;AACjBhB,mBAAO,CAACC,GAAR,CAAYe,KAAZ;AACAhB,mBAAO,CAACC,GAAR,CAAYe,KAAK,CAACC,MAAN,CAAaJ,KAAzB;AACA,iBAAK5B,YAAL,CAAkBiC,UAAlB,CAA6B;AAAC,0BAAY;AAAb,aAA7B;AAEA,iBAAKC,WAAL,CAAiBH,KAAK,CAACC,MAAN,CAAaJ,KAA9B;AACD;;;iBAGD,qBAAYP,EAAZ,EAAc;AAAA;;AACZ,iBAAKhC,UAAL,CAAgB8C,SAAhB,CAA0Bd,EAA1B,EAA8BR,SAA9B,CAAwC,UAACC,GAAD,EAAY;AAClDC,qBAAO,CAACC,GAAR,CAAYF,GAAZ;;AACA,kBAAGA,GAAG,IAAIA,GAAG,CAACG,MAAd,EAAqB;AACnB,sBAAI,CAACtB,SAAL,GAAiBmB,GAAG,CAACsB,MAArB;AACD;AACF,aALD,EAKG,UAAAjB,GAAG,EAAE;AACNJ,qBAAO,CAACC,GAAR,CAAYG,GAAZ;AACD,aAPD;AAQD;;;;;;;yBAnIUhC,e,EAAe,2I,EAAA,uI,EAAA,2H;AAAA,O;;;cAAfA,e;AAAe,mC;AAAA,iB;AAAA,gB;AAAA,onI;AAAA;AAAA;ACZ5B;;AACA;;AACI;;AACI;;AACI;;AACI;;AACI;;AAEI;;AACI;;AAA6B;;AAAqB;;AACtD;;AACA;;AAEI;;AAAuC;;AACnC;;AAAoB;;AACxB;;AAAqC;;AACjC;;AACW;;AAEf;;AACI;;AAAI;;AAAM;;AAAE;;AAChB;;AAEA;;AAAyD;AAAA,qBAAY,IAAAkD,uBAAA,EAAZ;AAAqC,aAArC;;AACrD;;AAEI;;AACI;;AAAM;;AAAgC;;AACtC;;AAGA;;AAKJ;;AAEA;;AAEJ;;AACJ;;AACA;;AAEA;;AACI;;AAAc;;AAAkB;;AAAQ;;AACZ;;AAAO;;AACvC;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AAEA;;AA4MA;;AAwBA;;;;AA3RiD;;AAAA;;AAsBI;;AAAA;;AAMT;;AAAA;;AAEC;;AAAA;;AAc8B;;AAAA;;AAWhC;;AAAA;;AA4MhB;;AAAA;;;;;;;;;wEDxPdlD,e,EAAe;gBAL3B,uDAK2B;iBALjB;AACTmD,oBAAQ,EAAE,YADD;AAETC,uBAAW,EAAE,yBAFJ;AAGTC,qBAAS,EAAE,CAAC,wBAAD;AAHF,W;AAKiB,U;;;;;;;;;;;;;;;;;;;;;;;;;;AEZ5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAmBaC,Y;;;;;cAAAA;;;;2BAAAA,Y;AAAY,S;AAAA,kBARd,CACP,4DADO,EAEP,0DAFO,EAGP,kEAHO,EAIP,0EAJO,EAKP,6EALO,CAQc;;;;4HAAZA,Y,EAAY;AAAA,yBATR,iEASQ;AATO,oBAE5B,4DAF4B,EAG5B,0DAH4B,EAI5B,kEAJ4B,EAK5B,0EAL4B,EAM5B,6EAN4B;AASP,S;AAHR,O;;;;;wEAGJA,Y,EAAY;gBAVxB,sDAUwB;iBAVf;AACRC,wBAAY,EAAE,CAAC,iEAAD,CADN;AAERzD,mBAAO,EAAE,CACP,4DADO,EAEP,0DAFO,EAGP,kEAHO,EAIP,0EAJO,EAKP,6EALO;AAFD,W;AAUe,U","file":"pages-signup-signup-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { SignupComponent } from './signup.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SignupComponent,\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class SignupRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { PagesService } from 'src/app/service/pages.service';\nimport { CustomValidator } from 'src/app/custom-validator';\nimport { MustMatch } from '../../_helpers/must-match.validator';\nimport { ApiService } from 'src/app/service/api.service';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.css']\n})\nexport class SignupComponent implements OnInit {\n  registerPageData: any;\n  registerForm: FormGroup;\n  registerFormStep1: FormGroup;\n  submitted = false;\n  role_id: any = 3;\n  registerResponse: any;\n  registerResponseError: any;\n  constructor(private page: PagesService, \n    private apiService:  ApiService,\n    private formBuilder: FormBuilder) { }\n\n  ngOnInit(): void {\n    this.registerFormStep1 = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n    });\n\n    this.registerForm = this.formBuilder.group({\n      fname: ['', Validators.required],\n      lname: ['', Validators.required],\n      \n      password: ['', [Validators.required, Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z]).{8,}$')]],\n      // password_confirmation: ['', Validators.compose([Validators.required, CustomValidator.equalTo('password')])],\n      // phone_number: ['', Validators.required],\n      country_id: ['', Validators.required],\n      state_id: ['', Validators.required],\n      city: ['', Validators.required],\n      zip_code: ['', Validators.required],\n      terms: [false, Validators.requiredTrue]\n      // city: ['', Validators.required],\n      // zip: ['', Validators.required],\n      // dob: ['', Validators.compose([Validators.required, CustomValidator.ageCheck('dob')])],\n      // phone_no: ['', Validators.required],\n      // event_date: [''],\n      // recaptchaReactive: ['', Validators.required],\n\n\n    },\n      // {\n      //   validator: [MustMatch('password', 'password_confirmation')]\n      // }\n    );\n\n    this.getRegisterPage();\n  }\n\n  getRegisterPage() {\n    this.page.getRegister().subscribe((res: any) => {\n      console.log(res);\n      if (res.status) {\n        this.registerPageData = res;\n      }\n    }, err => {\n      console.log(err);\n    })\n  }\n\n  selectRole(role) {\n    console.log(\"role\", role);\n    this.role_id = role.id;\n  }\n\n  get f() { return this.registerForm.controls; }\n  get g() { return this.registerFormStep1.controls; }\n\n  registrationSubmit() {\n    this.submitted = true;\n    this.registerResponseError = null;\n    console.log(\"registrationSubmit\", this.registerForm);\n\n    if (this.registerForm.invalid) {\n      return;\n    } else {\n      console.log(\"valid...\");\n\n      let formData = new FormData();\n      formData.set('fname', this.registerForm.value.fname);\n      formData.set('lname', this.registerForm.value.lname);\n      formData.set('email', this.registerFormStep1.value.email);\n      // formData.set('phone_number', '8899889988');\n      formData.set('password', this.registerForm.value.password);\n      formData.set('password_confirmation', this.registerForm.value.password);\n      formData.set('country_id', this.registerForm.value.country_id);\n      formData.set('city', this.registerForm.value.city);\n      formData.set('zip_code', this.registerForm.value.zip_code);\n      formData.set('role_id', this.role_id);\n\n      this.page.register(formData).subscribe((res: any) => {\n        console.log(res);\n        if(res.status){\n          this.registerResponse = res;\n        }else{\n          this.registerResponseError = res;\n        }\n      }, err => {\n        console.log(err);\n      })\n\n    }\n  }\n  submittedStep1 = false;\n  step1success = false;\n  registrationStep1Submit(){\n    this.submittedStep1 = true;\n    console.log(this.registerFormStep1);\n    if (this.registerFormStep1.invalid) {\n      return;\n    }else{\n      this.step1success = true;\n    } \n\n  }\n\n  changeCountry(event){\n    console.log(event);\n    console.log(event.target.value);\n    this.registerForm.patchValue({'state_id': ''});\n\n    this.getSateList(event.target.value);\n  }\n\n  stateList: any =[];\n  getSateList(id){\n    this.apiService.getStates(id).subscribe((res: any)=>{\n      console.log(res);\n      if(res && res.status){\n        this.stateList = res.states;\n      }\n    }, err=>{\n      console.log(err);\n    })\n  }\n  \n}\n","<app-header></app-header>\n<section class=\"homefix_login_area pt-85 pb-120\" [hidden]=\"step1success\">\n    <div class=\"container\">\n        <div class=\"row justify-content-center\">\n            <div class=\"col-xl-6 col-lg-8\">\n                <div class=\"homefix_login_inner\">\n                    <div class=\"homefix_login_details\">\n                        <!-- login_form title-->\n                        <div class=\"form_title\">\n                            <h2 class=\"login_form_title\">Get your free account</h2>\n                        </div>\n                        <form action=\"\">\n                            <!-- facebook button -->\n                            <a class=\"login_facebook_btn\" href=\"#\"><img src=\"assets/images/facebook.png\" alt=\"facebook\">\n                                Log in with facebook</a>\n                            <a class=\"login_google_btn\" href=\"#\"><img src=\"assets/images/email.png\" alt=\"email\">\n                                Log in\n                                with Google</a>\n                            <!-- or title -->\n                            <div class=\"or_cont\">\n                                <hr><span>or</span>\n                            </div>\n                            <!-- input email or password -->\n                            <form class=\"loginStep1\" [formGroup]=\"registerFormStep1\" (ngSubmit)=\"registrationStep1Submit()\">\n                                <div class=\"login_from_field\">\n\n                                    <div class=\"login_from_field_inner\">\n                                        <span><i class=\"icofont-envelope\"></i></span>\n                                        <input type=\"email\" placeholder=\"Email Address\" formControlName=\"email\"\n                                            [ngClass]=\"{ 'is-invalid': submittedStep1 && g.email.errors }\" name=\"email\"\n                                            id=\"email\">\n                                        <div *ngIf=\"submittedStep1 && g.email.errors\" class=\"invalid-feedback\">\n                                            <div *ngIf=\"g.email.errors.required\">Email is required</div>\n                                            <div *ngIf=\"g.email.errors.email\">Please, enter valid email\n                                                address.</div>\n                                        </div>\n                                    </div>\n                                    <!-- submit button -->\n                                    <input type=\"submit\" value=\"Continue with Email\">\n\n                                </div>\n                            </form>\n                            <hr>\n                            <!-- remember or sing up -->\n                            <div class=\"remember\">\n                                <label for=\"\">Already a member ?</label><a [routerLink]=\"['/login']\"\n                                    style=\"color: #00a3ff;\">Sign in</a>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>\n\n<div class=\"registration-box pt-85 pb-120\" *ngIf=\"!registerResponse && step1success\">\n    <div class=\"container\">\n        <div class=\"row justify-content-center\">\n            <div class=\"col-lg-7\">\n                <h2 class=\"text-center login_form_title\">Complete your free account setup</h2>\n                <div class=\"card\">\n                    <div class=\"card-body\">\n                        <form [formGroup]=\"registerForm\">\n                            <div class=\"reg-email-disp text-center mb-3\" *ngIf=\"registerFormStep1.value.email\">\n                                <p>{{registerFormStep1.value.email}}</p>\n                            </div>\n                            <div *ngIf=\"submitted && registerResponseError && registerResponseError.message\"\n                                class=\"invalid-feedback text-center mb-4\">\n                                <div>{{registerResponseError.message}}</div>\n                            </div>\n                            <div class=\"row mb-4\">\n                                <div class=\"col-md-6 mb-4 mb-md-0\">\n                                    <div class=\"input-group customborder\">\n                                        <span class=\"input-group-text bg-white  border-0 \" id=\"basic-addon1\"><i\n                                                class=\"bi bi-person-fill\" style=\"color: #00a3ff\"></i></span>\n                                        <input type=\"text\" placeholder=\"First name\" formControlName=\"fname\"\n                                            [ngClass]=\"{ 'is-invalid': submitted && f.fname.errors }\"\n                                            class=\"form-control border-start-0 rounded-0\" id=\"exampleInputEmail1\" name=\"fname\"\n                                            aria-describedby=\"emailHelp\" />\n                                    </div>\n                                    <div *ngIf=\"submitted && f.fname.errors\" class=\"invalid-feedback\">\n                                        <div *ngIf=\"f.fname.errors.required\">First name is required</div>\n                                    </div>\n                                </div>\n                                <div class=\"col-md-6\">\n                                    <div class=\"input-group customborder\">\n                                        <span class=\"input-group-text bg-white  border-0 \" id=\"basic-addon1\"><i\n                                                class=\"bi bi-person-fill\" style=\"color: #00a3ff\"></i></span>\n                                        <input type=\"text\" placeholder=\"Last name\" formControlName=\"lname\"\n                                            [ngClass]=\"{ 'is-invalid': submitted && f.lname.errors }\"\n                                            class=\"form-control border-start-0 rounded-0\" id=\"exampleInputEmail1\" name=\"lname\"\n                                            aria-describedby=\"emailHelp\" />\n                                    </div>\n                                    <div *ngIf=\"submitted && f.lname.errors\" class=\"invalid-feedback\">\n                                        <div *ngIf=\"f.lname.errors.required\">Last name is required</div>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <!-- <div class=\"mb-4\">\n                                <div class=\"input-group customborder\">\n                                    <span class=\"input-group-text bg-white  border-0\" id=\"basic-addon1\"><i\n                                            class=\"bi bi-envelope-fill\" style=\"color: #00a3ff\"></i></span>\n                                    <input type=\"text\" placeholder=\"Enter email address\" formControlName=\"email\"\n                                        [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\"\n                                        class=\"form-control rounded-0\" id=\"exampleInputEmail1\"\n                                        aria-describedby=\"emailHelp\" />\n                                </div>\n                                \n                            </div> -->\n\n                            <div class=\"mb-4\">\n                                <div class=\"input-group customborder\">\n                                    <span class=\"input-group-text bg-white  border-0\" id=\"basic-addon1\"><i\n                                            class=\"bi bi-key-fill\" style=\"color: #00a3ff\"></i></span>\n                                    <input type=\"password\" placeholder=\"Create a new Password\"\n                                        formControlName=\"password\"\n                                        [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\"\n                                        class=\"form-control rounded-0\" id=\"exampleInputEmail1\"\n                                        aria-describedby=\"emailHelp\" />\n                                </div>\n                                <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\n                                    <div *ngIf=\"f.password.errors.required\">Password is required</div>\n                                    <div *ngIf=\"f.password.errors.pattern || f.password.errors.minlength\">Password\n                                        must be 8\n                                        characters, at least 1 upper & 1 lowercase\n                                        letter</div>\n                                </div>\n                            </div>\n                            <div class=\"row\">\n                                \n                                <div class=\"col-md-3\">\n                                    <div class=\"mb-4\">\n                                        <select aria-placeholder=\"Country\" class=\"form-select customborder\"\n                                            formControlName=\"country_id\"\n                                            [ngClass]=\"{ 'is-invalid': submitted && f.country_id.errors }\"\n                                            aria-label=\"Default select example\" (change)=\"changeCountry($event)\">\n                                            <option selected value=\"\">Country</option>\n                                            <option *ngFor=\"let country of registerPageData?.countries\"\n                                                [value]=\"country.id\">{{country.name}}</option>\n                                            <!-- <option value=\"1\">One</option>\n                                            <option value=\"2\">Two</option>\n                                            <option value=\"3\">Three</option> -->\n                                        </select>\n                                        <div *ngIf=\"submitted && f.country_id.errors\" class=\"invalid-feedback\">\n                                            <div *ngIf=\"f.country_id.errors.required\">Country is required</div>\n                                        </div>\n                                    </div>\n                                </div>\n\n                                <div class=\"col-md-3\">\n                                    <div class=\"mb-4\">\n                                        <select aria-placeholder=\"State\" class=\"form-select customborder\"\n                                            formControlName=\"state_id\"\n                                            [ngClass]=\"{ 'is-invalid': submitted && f.state_id.errors }\"\n                                            aria-label=\"Default select example\">\n                                            <option selected value=\"\">Select State</option>\n                                            <option *ngFor=\"let state of stateList\"\n                                                [value]=\"state.id\">{{state.name}}</option>\n                                            <!-- <option value=\"1\">One</option>\n                                            <option value=\"2\">Two</option>\n                                            <option value=\"3\">Three</option> -->\n                                        </select>\n                                        <div *ngIf=\"submitted && f.state_id.errors\" class=\"invalid-feedback\">\n                                            <div *ngIf=\"f.state_id.errors.required\">State is required</div>\n                                        </div>\n                                    </div>\n                                </div>\n\n                                <div class=\"col-md-3\">\n                                    <div class=\"mb-4\">\n                                        <!-- <select aria-placeholder=\"City\" class=\"form-select customborder\"\n                                            formControlName=\"city\"\n                                            [ngClass]=\"{ 'is-invalid': submitted && f.city.errors }\"\n                                            aria-label=\"Default select example\">\n                                            <option selected value=\"\">City</option>\n                                            <option value=\"One\">One</option>\n                                            <option value=\"Two\">Two</option>\n                                            <option value=\"Three\">Three</option>\n                                        </select> -->\n                                        <input type=\"text\" placeholder=\"City\"\n                                            class=\"form-control customborder rounded-0\" formControlName=\"city\"\n                                            [ngClass]=\"{ 'is-invalid': submitted && f.city.errors }\"\n                                            id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" />\n                                        <div *ngIf=\"submitted && f.city.errors\" class=\"invalid-feedback\">\n                                            <div *ngIf=\"f.city.errors.required\">City is required</div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"col-md-3\">\n                                    <div class=\"mb-4\">\n                                        <input type=\"number\" placeholder=\"Zip code\"\n                                            class=\"form-control customborder rounded-0\" formControlName=\"zip_code\"\n                                            [ngClass]=\"{ 'is-invalid': submitted && f.zip_code.errors }\"\n                                            id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" />\n                                        <div *ngIf=\"submitted && f.zip_code.errors\" class=\"invalid-feedback\">\n                                            <div *ngIf=\"f.zip_code.errors.required\">Zip code is required</div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"col-md-12\">\n                                    <p class=\"text-center text-dark\">\n                                        <strong>I want to</strong>\n                                    </p>\n                                    <div class=\"text-center\">\n                                        <div class=\"btn-group\" role=\"group\"\n                                            aria-label=\"Basic radio toggle button group\">\n                                            <div *ngFor=\"let roles of registerPageData?.roles;let i = index;\">\n                                                <input type=\"radio\" class=\"btn-check \" name=\"btnradio\"\n                                                    id=\"btnradio{{i}}\" autocomplete=\"off\" checked=\"i==0\" />\n                                                <label (click)=\"selectRole(roles)\"\n                                                    class=\"btn btn-outline-primary radBtn    \"\n                                                    for=\"btnradio{{i}}\" id=\"btnrole{{i}}\">{{roles.display_name}}</label>\n                                            </div>\n                                            <!-- <div>\n                                                <input type=\"radio\" class=\"btn-check \" name=\"btnradio\" id=\"btnradio1\"\n                                                    autocomplete=\"off\" checked />\n                                                <label (click)=\"selectRole(paymentSelect[i+1])\" class=\"btn btn-outline-primary radBtn    \" for=\"btnradio1\">Hire a\n                                                    Pro</label>\n                                            </div>\n                                            <div>\n                                                <input type=\"radio\" class=\"btn-check  \" name=\"btnradio\" id=\"btnradio2\"\n                                                    autocomplete=\"off\" />\n                                                <label (click)=\"selectRole(paymentSelect[i+1])\" class=\"btn btn-outline-primary   \" for=\"btnradio2\">Work as a\n                                                    Constructor</label>\n                                            </div> -->\n                                        </div>\n                                    </div>\n                                    <div class=\"my-3 form-check\">\n                                        <input type=\"checkbox\" formControlName=\"terms\" class=\"form-check-input\"\n                                            id=\"exampleCheck1\" />\n                                        <label class=\"form-check-label fs-6 \" for=\"exampleCheck1\">Yes i understand and\n                                            agree to the\n                                            Homefixpros <a href=\"#0\" style=\"color: #00a3ff;\">Terms of\n                                                Use</a> and <a href=\"#0\" style=\"color: #00a3ff;\"> Privacy Policy</a>.\n                                        </label>\n                                        <div *ngIf=\"submitted && f.terms.errors\" class=\"invalid-feedback\">\n                                            <div *ngIf=\"f.terms.errors.required\">Please accept terms & policy</div>\n                                        </div>\n                                    </div>\n                                    <div class=\"d-grid gap-2\">\n                                        <button class=\"btn btn-primary accountbtn\" type=\"button\"\n                                            (click)=\"registrationSubmit()\" style=\"background-color: #00A3FF;\">Create My\n                                            Account</button>\n                                    </div>\n                                    <hr class=\"my-3\" />\n                                    <p class=\"text-center\"> Already a member? <a routerLink=\"/login\"\n                                            style=\"color: #00a3ff;\">Sign\n                                            in </a></p>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<div class=\"d-block conta\" *ngIf=\"registerResponse && registerResponse.status\">\n    <div class=\"card border-0\">\n        <div class=\"card-body px-3 px-md-5 py-5\">\n            <div class=\"text-center py-3\">\n                <img src=\"./assets/images/Group2089.png\" alt=\"\" />\n            </div>\n            <div class=\"text-center\">\n                <p class=\"fs-3 fw-bold text-dark\">\n                    Verify your email to proceed\n                </p>\n                <p class=\"mb-4\">\n                    {{registerResponse?.message}}\n                </p>\n\n                <div class=\"d-grid gap-2\">\n                    <button [routerLink]=\"['/login']\" class=\"btn btn-primary\" type=\"button\"\n                        style=\"background-color: #00A3FF;\">Login</button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<!-- Homefix reg Area End -->\n<app-footer></app-footer>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SignupRoutingModule } from './signup-routing.module';\nimport { SignupComponent } from './signup.component';\nimport { IncludeModule } from 'src/app/includes/include.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n\n@NgModule({\n  declarations: [SignupComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SignupRoutingModule,\n    IncludeModule\n  ]\n})\nexport class SignupModule { }\n"]}